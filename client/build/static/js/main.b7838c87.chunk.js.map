{"version":3,"sources":["componets/Add.js","componets/Eat.js","App.js","serviceWorker.js","index.js"],"names":["Add","state","contect","meal","handleChange","bind","handleSubmit","event","target","name","this","setState","value","preventDefault","d","Date","axios","post","day","getDate","month","getMonth","year","getFullYear","hour","getHours","min","getMinutes","content","catch","error","console","log","className","onSubmit","onChange","defaultValue","type","Component","Eat","data","url","a","async","get","response","getData","then","res","err","map","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uVA6EeA,E,YAxEb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,QAAS,6EACTC,KAAM,2DAGR,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARR,E,0EAWDE,GACe,aAAtBA,EAAMC,OAAOC,KACfC,KAAKC,SAAS,CAAET,QAASK,EAAMC,OAAOI,QAEtCF,KAAKC,SAAS,CAAER,KAAMI,EAAMC,OAAOI,U,mCAI1BL,GACXA,EAAMM,iBACN,IAAMC,EAAI,IAAIC,KACdC,IACGC,KAAK,yBAA0B,CAC9BC,IAAKJ,EAAEK,UACPC,MAAON,EAAEO,WACTC,KAAMR,EAAES,cACRC,KAAMV,EAAEW,WACRC,IAAKZ,EAAEa,aACPxB,KAAMO,KAAKT,MAAME,KACjByB,QAASlB,KAAKT,MAAMC,UAErB2B,OAAM,SAASC,GACdC,QAAQC,IAAIF,Q,4EAMhB,OACE,yBAAKG,UAAU,gBACb,0BAAMC,SAAUxB,KAAKJ,cACnB,sGAEE,4BAAQ6B,SAAUzB,KAAKN,cACrB,4BAAQgC,cAAY,EAACxB,MAAM,2DAA3B,2DAGA,4BAAQA,MAAM,qDAAd,qDACA,4BAAQA,MAAM,uEAAd,uEACA,4BAAQA,MAAM,2DAAd,2DACA,4BAAQA,MAAM,qDAAd,qDACA,4BAAQA,MAAM,2DAAd,6DAGJ,6BACA,sGAEE,8BACEA,MAAOF,KAAKT,MAAMC,QAClBiC,SAAUzB,KAAKN,aACfK,KAAK,cAGT,6BACA,2BAAO4B,KAAK,WACZ,mC,GAnEQC,a,gBCiEHC,G,kBAhEb,aAAe,IAAD,8BACZ,+CACKtC,MAAQ,CACXuC,KAAM,CACJ,CACEhB,KAAM,OACNE,IAAK,MACLR,IAAK,MACLE,MAAO,QACPE,KAAM,OACNnB,KAAM,YACNyB,QAAS,aAXH,E,+EAiBIrB,M,mCAELA,M,0CAEQ,IAAD,QAClB,SAAuBkC,GAAvB,eAAAC,EAAAC,OAAA,2EAAAD,EAAA,MAE2B1B,IAAM4B,IAAIH,IAFrC,cAEUI,EAFV,yBAGWA,GAHX,gCAKId,QAAQD,MAAR,MALJ,yDAQAgB,CAAQ,0BACLC,MAAK,SAAAC,GACJ,EAAKrC,SAAS,CAAE6B,KAAMQ,EAAIR,UAE3BX,OAAM,SAAAoB,GAAG,OAAIlB,QAAQC,IAAIiB,Q,+BAGpB,IAAD,OACP,OACE,yBAAKhB,UAAU,sBACZvB,KAAKT,MAAMuC,KAAKU,KAAI,SAACV,EAAMW,GAC1B,OACE,yBAAKC,IAAKD,EAAGlB,UAAU,iBACrB,yBAAKA,UAAU,QACb,4BAAK,EAAKhC,MAAMuC,KAAKW,GAAGjC,IAAxB,KACA,4BAAK,EAAKjB,MAAMuC,KAAKW,GAAG/B,MAAQ,EAAhC,KACA,4BAAK,EAAKnB,MAAMuC,KAAKW,GAAG7B,OAE1B,yBAAKW,UAAU,QACb,4BAAKO,EAAKhB,KAAV,KACA,4BAAKgB,EAAKd,MAEZ,yBAAKO,UAAU,QACb,4BAAK,EAAKhC,MAAMuC,KAAKW,GAAGhD,MACxB,2BAAIqC,EAAKZ,mB,GAvDPU,cCgBHe,E,YAdb,aAAe,uE,sEAKb,OACE,yBAAKpB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATUK,aCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,MAAK,SAAAmB,GACjCA,EAAaC,kB","file":"static/js/main.b7838c87.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Add.css\";\r\nimport axios from \"axios\";\r\n\r\nclass Add extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      contect: \"הכנס את הארוחה\",\r\n      meal: \"ארוחת בוקר\"\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (event.target.name === \"textarea\") {\r\n      this.setState({ contect: event.target.value });\r\n    } else {\r\n      this.setState({ meal: event.target.value });\r\n    }\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    const d = new Date();\r\n    axios\r\n      .post(\"http://localhost:5000/\", {\r\n        day: d.getDate(),\r\n        month: d.getMonth(),\r\n        year: d.getFullYear(),\r\n        hour: d.getHours(),\r\n        min: d.getMinutes(),\r\n        meal: this.state.meal,\r\n        content: this.state.contect\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {}\r\n  render() {\r\n    return (\r\n      <div className=\"add-continer\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>\r\n            בחר את הארוחה\r\n            <select onChange={this.handleChange}>\r\n              <option defaultValue value=\"ארוחת בוקר\">\r\n                ארוחת בוקר\r\n              </option>\r\n              <option value=\"ארוחת עשר\">ארוחת עשר</option>\r\n              <option value=\"ארוחת צהריים\">ארוחת צהריים</option>\r\n              <option value=\"ארוחת ארבע\">ארוחת ארבע</option>\r\n              <option value=\"ארוחת ערב\">ארוחת ערב</option>\r\n              <option value=\"ארוחת לילה\">ארוחת לילה</option>\r\n            </select>\r\n          </label>\r\n          <br />\r\n          <label>\r\n            הכנס את האוכל\r\n            <textarea\r\n              value={this.state.contect}\r\n              onChange={this.handleChange}\r\n              name=\"textarea\"\r\n            />\r\n          </label>\r\n          <br />\r\n          <input type=\"submit\" />\r\n          <br />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Add;\r\n","import React, { Component } from \"react\";\r\nimport \"./Eat.css\";\r\nimport axios from \"axios\";\r\n\r\nclass Eat extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      data: [\r\n        {\r\n          hour: \"hour\",\r\n          min: \"min\",\r\n          day: \"day\",\r\n          month: \"month\",\r\n          year: \"year\",\r\n          meal: \"breakfast\",\r\n          content: \"content\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  handleInputChange(event) {}\r\n\r\n  handleSubmit(event) {}\r\n\r\n  componentDidMount() {\r\n    async function getData(url) {\r\n      try {\r\n        const response = await axios.get(url);\r\n        return response;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    }\r\n    getData(\"http://localhost:5000/\")\r\n      .then(res => {\r\n        this.setState({ data: res.data });\r\n      })\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main-meal-continer\">\r\n        {this.state.data.map((data, i) => {\r\n          return (\r\n            <div key={i} className=\"meal-continer\">\r\n              <div className=\"date\">\r\n                <h3>{this.state.data[i].day}/</h3>\r\n                <h3>{this.state.data[i].month + 1}/</h3>\r\n                <h3>{this.state.data[i].year}</h3>\r\n              </div>\r\n              <div className=\"time\">\r\n                <h4>{data.hour}:</h4>\r\n                <h4>{data.min}</h4>\r\n              </div>\r\n              <div className=\"meal\">\r\n                <h5>{this.state.data[i].meal}</h5>\r\n                <p>{data.content}</p>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Eat;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Add from \"./componets/Add\";\nimport Eat from \"./componets/Eat\";\n\nclass App extends Component {\n  constructor() {\n    super();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Add />\n        <Eat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}